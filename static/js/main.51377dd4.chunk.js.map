{"version":3,"sources":["components/Field/Field.module.css","components/Field/Field.js","components/App.js","index.js"],"names":["module","exports","shortid","require","columns","item","rows","arrows","Field","useState","addressStart","setAddressStart","addressFinish","setAddressFinish","addressWrong","setAddressWrong","zIndex","cellInputStyle","setCellInputStyle","transform","cellSpanStyle","setCellSpanStyle","addressColumn","useRef","addressRow","start","finish","wrong","checked","handleChange","value","target","length","split","current","handleClick","className","s","field","title","addressColumns","map","column","key","style","display","addressRows","row","cellWrap","width","cell","id","cellInput","type","onChange","htmlFor","cellLabelStart","cellBtnFinish","onClick","arrowWrap","arrow","classArrow","push","i","index","arr","up","right","down","left","join","generate","again","App","ReactDOM","render","document","getElementById"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,eAAiB,8BAA8B,YAAc,2BAA2B,cAAgB,6BAA6B,WAAa,0BAA0B,SAAW,wBAAwB,KAAO,oBAAoB,UAAY,yBAAyB,eAAiB,8BAA8B,cAAgB,6BAA6B,UAAY,yBAAyB,MAAQ,qBAAqB,GAAK,kBAAkB,MAAQ,qBAAqB,KAAO,oBAAoB,KAAO,oBAAoB,MAAQ,uB,iKCGrmBC,EAAUC,EAAQ,IAIlBC,EAAU,CACd,CAAEC,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,MAKJC,EAAO,CACX,CAAED,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,MASJE,EAAS,CACb,OACA,QACA,OACA,QACA,KACA,OACA,OACA,OACA,KACA,SA+QaC,EAlQD,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACXC,EADW,KACGC,EADH,OAEwBF,mBAAS,IAFjC,mBAEXG,EAFW,KAEIC,EAFJ,OAGsBJ,mBAAS,IAH/B,mBAGXK,EAHW,KAGGC,EAHH,OAI0BN,mBAAS,CAAEO,OAAQ,IAJ7C,mBAIXC,EAJW,KAIKC,EAJL,OAKsBT,mBAAS,CAAEU,UAAW,aAL5C,mBAKbC,EALa,KAKEC,EALF,KAMZC,EAAgBC,iBAAO,MACvBC,EAAaD,iBAAO,MACtBE,EAAQ,GACRC,EAAS,GACTC,EAAQ,GACRC,GAAU,EAEd,SAASC,EAAT,GAAmC,IACzBC,EADwB,EAAVC,OACdD,MACgB,IAAxBpB,EAAasB,QAAgBrB,EAAgBmB,EAAMG,MAAM,MACzDX,EAAcY,QAAUJ,EAAMG,MAAM,KAAK,GACzCT,EAAWU,QAAUJ,EAAMG,MAAM,KAAK,GACtCf,EAAkB,CAAEF,OAAQ,IAG9B,SAASmB,EAAT,GAAkC,IACxBL,EADuB,EAAVC,OACbD,MACRf,EAAgBe,EAAMG,MAAM,MAC5BZ,EAAiB,CAAEF,UAAW,aAyHhC,OACE,yBAAKiB,UAAWC,IAAEC,OAChB,wBAAIF,UAAWC,IAAEE,OAAjB,4KAKA,6BACE,wBAAIH,UAAWC,IAAEG,gBACdpC,EAAQqC,KAAI,SAAAC,GAAM,OACjB,wBAAIN,UAAWC,IAAEf,cAAeqB,IAAKD,EAAOrC,MACzCqC,EAAOrC,UAKd,yBAAKuC,MAAO,CAAEC,QAAS,SACrB,wBAAIT,UAAWC,IAAES,aACdxC,EAAKmC,KAAI,SAAAM,GAAG,OACX,wBAAIX,UAAWC,IAAEb,WAAYmB,IAAKI,EAAI1C,MACnC0C,EAAI1C,UAKX,wBACE+B,UAAWC,IAAEW,SACbJ,MAAO,CAAEK,MAAM,GAAD,OAAK,GAAK7C,EAAQ4B,OAAS5B,EAAQ4B,OAAS,EAA5C,QAEb1B,EAAKmC,KAAI,SAAAM,GACR,OAAO3C,EAAQqC,KAAI,SAAAC,GA2BjB,OA1BAjB,EAAQ,GACRC,EAAS,GACTC,EAAQ,GACRC,GAAU,EAGRhB,EAAc,KAAO8B,EAAOrC,MAC5BO,EAAc,KAAOmC,EAAI1C,KAEzBqB,EAAS,SAEe,IAAxBhB,EAAasB,QACblB,EAAa,KAAO4B,EAAOrC,MAC3BS,EAAa,KAAOiC,EAAI1C,OAExBsB,EAAQ,SAIRjB,EAAa,KAAOgC,EAAOrC,MAC3BK,EAAa,KAAOqC,EAAI1C,OAExBoB,EAAQ,QACRG,GAAU,GAIV,wBAAIQ,UAAWC,IAAEa,KAAMP,IAAKD,EAAOrC,KAAO0C,EAAI1C,MAC5C,2BACE8C,GAAG,OACHf,UAAWC,IAAEe,UACbR,MAAO3B,EACPoC,KAAK,WACLzB,QAASA,EACTE,MAAOY,EAAOrC,KAAO,IAAM0C,EAAI1C,KAC/BiD,SAAUzB,IAEZ,2BAAO0B,QAAQ,OAAOnB,UAAWC,IAAEmB,gBAChC/B,GAGH,4BACE4B,KAAK,SACLvB,MAAOY,EAAOrC,KAAO,IAAM0C,EAAI1C,KAC/B+B,UAAWC,IAAEoB,cACbC,QAASvB,GAET,0BAAMS,MAAOxB,GAAgBM,GAAUC,cAUvD,wBAAIS,UAAWC,IAAEsB,WACdpD,EAAOkC,KAAI,SAAAmB,GACV,IAAMC,EAAa,CAACxB,IAAEuB,OAQtB,OAPAC,EAAWC,KAAKzB,IAAEuB,IApM1B,SAAYA,GACV,GAAc,OAAVA,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAIzD,EAAK0B,OAAQ+B,GAAK,EACpC,GAAIvC,EAAWU,UAAY5B,EAAKyD,GAAG1D,KAAM,CACvC,IAAI2D,OAAK,EACT,GAAID,EAAI,EAAI,EAAG,CACbC,EAAQ1D,EAAK0B,OAAS,EACtBR,EAAWU,QAAU5B,EAAK0D,GAAO3D,KACjC,MAEA2D,EAAQD,EAAI,EACZvC,EAAWU,QAAU5B,EAAK0D,GAAO3D,KACjC,MAKR,IAAM4D,EAAM,GACZA,EAAI,GAAK3C,EAAcY,QACvB+B,EAAI,GAAKzC,EAAWU,QACpBZ,EAAcY,SACZV,EAAWU,SACc,IAAzBtB,EAAcoB,QACdnB,EAAiBoD,GA+KbC,CAAGN,GA5KX,SAAeA,GACb,GAAc,UAAVA,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAI3D,EAAQ4B,OAAQ+B,GAAK,EACvC,GAAIzC,EAAcY,UAAY9B,EAAQ2D,GAAG1D,KAAM,CAC7C,IAAI2D,OAAK,EACT,GAAID,EAAI,EAAI3D,EAAQ4B,OAAS,EAAG,CAC9BgC,EAAQ,EACR1C,EAAcY,QAAU9B,EAAQ4D,GAAO3D,KACvC,MAEA2D,EAAQD,EAAI,EACZzC,EAAcY,QAAU9B,EAAQ4D,GAAO3D,KACvC,MAKR,IAAM4D,EAAM,GACZA,EAAI,GAAK3C,EAAcY,QACvB+B,EAAI,GAAKzC,EAAWU,QACpBZ,EAAcY,SACZV,EAAWU,SACc,IAAzBtB,EAAcoB,QACdnB,EAAiBoD,GAsJbE,CAAMP,GAnJd,SAAcA,GACZ,GAAc,SAAVA,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAIzD,EAAK0B,OAAQ+B,GAAK,EACpC,GAAIvC,EAAWU,UAAY5B,EAAKyD,GAAG1D,KAAM,CACvC,IAAI2D,OAAK,EACT,GAAID,EAAI,EAAIzD,EAAK0B,OAAS,EAAG,CAC3BgC,EAAQ,EACRxC,EAAWU,QAAU5B,EAAK0D,GAAO3D,KACjC,MAEA2D,EAAQD,EAAI,EACZvC,EAAWU,QAAU5B,EAAK0D,GAAO3D,KACjC,MAKR,IAAM4D,EAAM,GACZA,EAAI,GAAK3C,EAAcY,QACvB+B,EAAI,GAAKzC,EAAWU,QAEpBZ,EAAcY,SACZV,EAAWU,SACc,IAAzBtB,EAAcoB,QACdnB,EAAiBoD,GA4HbG,CAAKR,GAzHb,SAAcA,GACZ,GAAc,SAAVA,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAI3D,EAAQ4B,OAAQ+B,GAAK,EACvC,GAAIzC,EAAcY,UAAY9B,EAAQ2D,GAAG1D,KAAM,CAC7C,IAAI2D,OAAK,EACT,GAAID,EAAI,EAAI,EAAG,CACbC,EAAQ5D,EAAQ4B,OAAS,EACzBV,EAAcY,QAAU9B,EAAQ4D,GAAO3D,KACvC,MAEA2D,EAAQD,EAAI,EACZzC,EAAcY,QAAU9B,EAAQ4D,GAAO3D,KACvC,MAKR,IAAM4D,EAAM,GACZA,EAAI,GAAK3C,EAAcY,QACvB+B,EAAI,GAAKzC,EAAWU,QACpBZ,EAAcY,SACZV,EAAWU,SACc,IAAzBtB,EAAcoB,QACdnB,EAAiBoD,GAmGbI,CAAKT,GAGH,wBAAIxB,UAAWyB,EAAWS,KAAK,KAAM3B,IAAKzC,EAAQqE,YAChD,6CAMR,4BAAQnC,UAAWC,IAAEmC,MAAOnB,KAAK,SAASK,QAhO9C,WACE/C,EAAgB,IAChBE,EAAiB,IACjBK,EAAkB,CAAEF,OAAQ,IAC5BK,EAAiB,CAAEF,UAAW,aAC9BG,EAAcY,QAAU,KACxBV,EAAWU,QAAU,KACrBT,EAAQ,GACRC,EAAS,GACTC,EAAQ,GACRC,GAAU,IAsNR,WCtSS6C,MAJf,WACE,OAAO,kBAAC,EAAD,O,kBCITC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.51377dd4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"Field_field__3TIMV\",\"title\":\"Field_title__3so7N\",\"addressColumns\":\"Field_addressColumns__3IziE\",\"addressRows\":\"Field_addressRows__28qJq\",\"addressColumn\":\"Field_addressColumn__2H_gQ\",\"addressRow\":\"Field_addressRow__xEpQJ\",\"cellWrap\":\"Field_cellWrap__2tHl7\",\"cell\":\"Field_cell__flyCK\",\"cellInput\":\"Field_cellInput__2Oi27\",\"cellLabelStart\":\"Field_cellLabelStart__7413M\",\"cellBtnFinish\":\"Field_cellBtnFinish__fSNV9\",\"arrowWrap\":\"Field_arrowWrap__1tK2x\",\"arrow\":\"Field_arrow__19Gf4\",\"up\":\"Field_up__3YjvX\",\"right\":\"Field_right__14-Wm\",\"down\":\"Field_down__CjdhJ\",\"left\":\"Field_left__2PzPq\",\"again\":\"Field_again__kB3qI\"};","import React, { useState, useRef } from \"react\";\r\n\r\nimport s from \"./Field.module.css\";\r\n\r\nconst shortid = require(\"shortid\");\r\n\r\n// Arrays of \"columns\", \"rows\" and \"arrows\" can have any number of elements.\r\n\r\nconst columns = [\r\n  { item: \"a\" },\r\n  { item: \"b\" },\r\n  { item: \"c\" },\r\n  // { item: \"d\" },\r\n  // { item: \"e\" },\r\n  // { item: \"f\" }\r\n];\r\nconst rows = [\r\n  { item: \"1\" },\r\n  { item: \"2\" },\r\n  { item: \"3\" },\r\n  // { item: \"4\" },\r\n  // { item: \"5\" },\r\n  // { item: \"6\" },\r\n  // { item: \"7\" },\r\n  // { item: \"8\" },\r\n  // { item: \"9\" },\r\n  // { item: \"10\" }\r\n];\r\nconst arrows = [\r\n  \"down\",\r\n  \"right\",\r\n  \"down\",\r\n  \"right\",\r\n  \"up\",\r\n  \"left\",\r\n  \"down\",\r\n  \"left\",\r\n  \"up\",\r\n  \"right\",\r\n  // \"right\",\r\n  // \"up\",\r\n  // \"left\",\r\n  // \"down\",\r\n  // \"left\",\r\n  // \"up\",\r\n  // \"right\",\r\n  // \"right\",\r\n  // \"up\",\r\n  // \"left\"\r\n];\r\n\r\nconst Field = () => {\r\n  const [addressStart, setAddressStart] = useState([]);\r\n  const [addressFinish, setAddressFinish] = useState([]);\r\n  const [addressWrong, setAddressWrong] = useState([]);\r\n  const [cellInputStyle, setCellInputStyle] = useState({ zIndex: 3 });\r\n  let [cellSpanStyle, setCellSpanStyle] = useState({ transform: \"scale(0)\" });\r\n  const addressColumn = useRef(null);\r\n  const addressRow = useRef(null);\r\n  let start = \"\";\r\n  let finish = \"\";\r\n  let wrong = \"\";\r\n  let checked = false;\r\n\r\n  function handleChange({ target }) {\r\n    const { value } = target;\r\n    addressStart.length === 0 && setAddressStart(value.split(\" \"));\r\n    addressColumn.current = value.split(\" \")[0];\r\n    addressRow.current = value.split(\" \")[1];\r\n    setCellInputStyle({ zIndex: 1 });\r\n  }\r\n\r\n  function handleClick({ target }) {\r\n    const { value } = target;\r\n    setAddressWrong(value.split(\" \"));\r\n    setCellSpanStyle({ transform: \"scale(1)\" });\r\n  }\r\n\r\n  function handleAgain() {\r\n    setAddressStart([]);\r\n    setAddressFinish([]);\r\n    setCellInputStyle({ zIndex: 3 });\r\n    setCellSpanStyle({ transform: \"scale(0)\" });\r\n    addressColumn.current = null;\r\n    addressRow.current = null;\r\n    start = \"\";\r\n    finish = \"\";\r\n    wrong = \"\";\r\n    checked = false;\r\n  }\r\n\r\n  function up(arrow) {\r\n    if (arrow === \"up\") {\r\n      for (let i = 0; i < rows.length; i += 1) {\r\n        if (addressRow.current === rows[i].item) {\r\n          let index;\r\n          if (i - 1 < 0) {\r\n            index = rows.length - 1;\r\n            addressRow.current = rows[index].item;\r\n            break;\r\n          } else {\r\n            index = i - 1;\r\n            addressRow.current = rows[index].item;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const arr = [];\r\n    arr[0] = addressColumn.current;\r\n    arr[1] = addressRow.current;\r\n    addressColumn.current &&\r\n      addressRow.current &&\r\n      addressFinish.length === 0 &&\r\n      setAddressFinish(arr);\r\n  }\r\n\r\n  function right(arrow) {\r\n    if (arrow === \"right\") {\r\n      for (let i = 0; i < columns.length; i += 1) {\r\n        if (addressColumn.current === columns[i].item) {\r\n          let index;\r\n          if (i + 1 > columns.length - 1) {\r\n            index = 0;\r\n            addressColumn.current = columns[index].item;\r\n            break;\r\n          } else {\r\n            index = i + 1;\r\n            addressColumn.current = columns[index].item;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const arr = [];\r\n    arr[0] = addressColumn.current;\r\n    arr[1] = addressRow.current;\r\n    addressColumn.current &&\r\n      addressRow.current &&\r\n      addressFinish.length === 0 &&\r\n      setAddressFinish(arr);\r\n  }\r\n\r\n  function down(arrow) {\r\n    if (arrow === \"down\") {\r\n      for (let i = 0; i < rows.length; i += 1) {\r\n        if (addressRow.current === rows[i].item) {\r\n          let index;\r\n          if (i + 1 > rows.length - 1) {\r\n            index = 0;\r\n            addressRow.current = rows[index].item;\r\n            break;\r\n          } else {\r\n            index = i + 1;\r\n            addressRow.current = rows[index].item;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const arr = [];\r\n    arr[0] = addressColumn.current;\r\n    arr[1] = addressRow.current;\r\n\r\n    addressColumn.current &&\r\n      addressRow.current &&\r\n      addressFinish.length === 0 &&\r\n      setAddressFinish(arr);\r\n  }\r\n\r\n  function left(arrow) {\r\n    if (arrow === \"left\") {\r\n      for (let i = 0; i < columns.length; i += 1) {\r\n        if (addressColumn.current === columns[i].item) {\r\n          let index;\r\n          if (i - 1 < 0) {\r\n            index = columns.length - 1;\r\n            addressColumn.current = columns[index].item;\r\n            break;\r\n          } else {\r\n            index = i - 1;\r\n            addressColumn.current = columns[index].item;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const arr = [];\r\n    arr[0] = addressColumn.current;\r\n    arr[1] = addressRow.current;\r\n    addressColumn.current &&\r\n      addressRow.current &&\r\n      addressFinish.length === 0 &&\r\n      setAddressFinish(arr);\r\n  }\r\n\r\n  return (\r\n    <div className={s.field}>\r\n      <h2 className={s.title}>\r\n        By clicking on an arbitrary square you will set the \"Start\" cell.\r\n        Following the arrows you need to find the \"Finish\" cell. The \"Again\"\r\n        button will start all over again.\r\n      </h2>\r\n      <div>\r\n        <ul className={s.addressColumns}>\r\n          {columns.map(column => (\r\n            <li className={s.addressColumn} key={column.item}>\r\n              {column.item}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div style={{ display: \"flex\" }}>\r\n          <ul className={s.addressRows}>\r\n            {rows.map(row => (\r\n              <li className={s.addressRow} key={row.item}>\r\n                {row.item}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <ul\r\n            className={s.cellWrap}\r\n            style={{ width: `${15 * columns.length + columns.length - 1}em` }}\r\n          >\r\n            {rows.map(row => {\r\n              return columns.map(column => {\r\n                start = \"\";\r\n                finish = \"\";\r\n                wrong = \"\";\r\n                checked = false;\r\n\r\n                if (\r\n                  addressFinish[0] === column.item &&\r\n                  addressFinish[1] === row.item\r\n                ) {\r\n                  finish = \"FINISH\";\r\n                } else if (\r\n                  addressStart.length !== 0 &&\r\n                  addressWrong[0] === column.item &&\r\n                  addressWrong[1] === row.item\r\n                ) {\r\n                  wrong = \"WRONG\";\r\n                }\r\n\r\n                if (\r\n                  addressStart[0] === column.item &&\r\n                  addressStart[1] === row.item\r\n                ) {\r\n                  start = \"START\";\r\n                  checked = true;\r\n                }\r\n\r\n                return (\r\n                  <li className={s.cell} key={column.item + row.item}>\r\n                    <input\r\n                      id=\"cell\"\r\n                      className={s.cellInput}\r\n                      style={cellInputStyle}\r\n                      type=\"checkbox\"\r\n                      checked={checked}\r\n                      value={column.item + \" \" + row.item}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <label htmlFor=\"cell\" className={s.cellLabelStart}>\r\n                      {start}\r\n                    </label>\r\n\r\n                    <button\r\n                      type=\"button\"\r\n                      value={column.item + \" \" + row.item}\r\n                      className={s.cellBtnFinish}\r\n                      onClick={handleClick}\r\n                    >\r\n                      <span style={cellSpanStyle}>{finish || wrong}</span>\r\n                    </button>\r\n                  </li>\r\n                );\r\n              });\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <ul className={s.arrowWrap}>\r\n        {arrows.map(arrow => {\r\n          const classArrow = [s.arrow];\r\n          classArrow.push(s[arrow]);\r\n\r\n          up(arrow);\r\n          right(arrow);\r\n          down(arrow);\r\n          left(arrow);\r\n\r\n          return (\r\n            <li className={classArrow.join(\" \")} key={shortid.generate()}>\r\n              <span>&#8679;</span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n\r\n      <button className={s.again} type=\"button\" onClick={handleAgain}>\r\n        AGAIN\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\n\nimport Field from \"./Field/Field\";\n\nfunction App() {\n  return <Field />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./styles/normalize.css\";\nimport \"./styles/reset.css\";\nimport \"./styles/index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}